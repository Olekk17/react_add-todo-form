{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","id","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","preparedTodos","App","useState","setTitle","selectedUser","setSelectedUser","setTodos","isUserError","setIsUserError","isTitleError","setIsTitleError","action","method","onSubmit","event","preventDefault","isTitleEmpty","trim","length","isUserNotChosen","isBothFieldsNotEmpty","current","Math","max","findMaxId","newTodo","type","value","onChange","target","placeholder","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbe5f8d1.chunk.js","sourcesContent":["import { User } from '../../types/User';\nimport './UserInfo.scss';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport './TodoInfo.scss';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n    id,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(({ id }) => id === userId);\n\n  return foundUser || null;\n}\n\nconst preparedTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst findMaxId = (todos: Todo[]) => Math.max(...todos.map(todo => todo.id));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [todos, setTodos] = useState(preparedTodos);\n  const [isUserError, setIsUserError] = useState(false);\n  const [isTitleError, setIsTitleError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const isTitleEmpty = !title.trim().length;\n    const isUserNotChosen = !selectedUser;\n    const isBothFieldsNotEmpty = !isUserNotChosen && !isTitleEmpty;\n\n    setIsTitleError(isTitleEmpty);\n    setIsUserError(isUserNotChosen);\n\n    if (isBothFieldsNotEmpty) {\n      setTodos(current => {\n        const id = findMaxId(current) + 1;\n        const newTodo = {\n          id,\n          title,\n          completed: false,\n          userId: selectedUser.id,\n          user: selectedUser,\n        };\n\n        return ([...current, newTodo]);\n      });\n\n      setTitle('');\n      setSelectedUser(null);\n      setIsUserError(false);\n      setIsTitleError(false);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setIsTitleError(!value.length);\n\n    setTitle(value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setIsUserError(value === '0');\n\n    setSelectedUser(getUserById(Number(value)));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <h2>Please enter new user info:</h2>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={handleInputChange}\n              placeholder=\"Enter new title\"\n            />\n          </label>\n\n          {isTitleError\n          && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser ? selectedUser.id : 0}\n              onChange={handleSelectChange}\n            >\n              <option\n                value=\"0\"\n                disabled\n              >\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isUserError\n          && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}